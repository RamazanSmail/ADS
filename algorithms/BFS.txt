//BFS - поиск в ширину
d[i, n] = infinity
d[s] = 0
pr[s] == -1        //Индекс отца начальной врешины pr равен -1 так как s самая первая вершина, 
Q.push(s)          // соотвественно мы добавляем в очередь начальный индекс
while(!Q.empty):   //пока очередь не пустая
    V = Q.front() Q.pop()     //V is vertex(вершина), рассматриваем передний элемент и удаляем что бы уже не смотреть
    for i in G[V]:     // проходимся по графу G и пока дистанция между соседями неизвестна 
        if(d[i] == infinity):  
            d[i] = d[v] + 1     //записываем эту дистанцию как наша дистанция на данный момент + 1
            Q.push(i)           //добавляем в очередь   
            pr[i] = V           // записываем что отец этой вершины равен начальной вершины от которой вышли другие



  2     6
 /  \  /  \
1    4     7
 \  /     /
  3 ---- 5

В данном примере начальная вершина это 1, далее смотрим что следующая дистанция не записана, поэтому мы пишем
что дистанция до 2 равна d[v] + 1. Далее видим что есть еще одна вершина с неизвестным расстоянием это 3.
Мы проверяем её также как и 2 и записываем дистанцию до этой вершины, она также равна d[v] + 1.
С 4 немного по-другому, мы смотрим что от 2 есть неизвестная еще вершина это 4, записываем и когда смотрим 
что больше неизвестных вершин от 2 нет, смотри 3ку. Там выходит что дистанция до 4 уже есть поэтому условие
if мы пропускаем. и так далее мы проверяем всем вершины.
Time complexity: O(V + E) Edge - грань, Vertex - вершина